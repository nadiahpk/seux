% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_U0_bnd.R
\name{find_U0_bnd}
\alias{find_U0_bnd}
\title{Find U0 bound}
\usage{
find_U0_bnd(midP_fnc, alpha, S0, S1, U1, d0, impossibleFlag = FALSE)
}
\arguments{
\item{midP_fnc}{Closure, a function to be used as the mid-P function.}

\item{alpha}{Float [0,1], analogous to a confidence level.}

\item{S0}{Integer, number of detected extant species
at the previous timestep.}

\item{S1}{Integer, number of detected extant species
at the current timestep.}

\item{U1}{Integer, number of undetected extant species
at the current timestep.}

\item{d0}{Integer, number of species detected during
the timestep.}

\item{impossibleFlag}{Boolean, indicates whether or not the previous timestep
of the sampling algorithm had sampled an impossible value (i.e. U1) for the bound.
Defaults to FALSE.}
}
\value{
A list with elements: U0_bnd, impossibleFlag.
 \describe{
 \item{U0_bnd:}{Integer, the U bound at alpha.}
 \item{impossibleFlag:}{Boolean, is TRUE if the U bound is impossible.}
 }
}
\description{
Finds the U0 bound, which is the greatest value of U0 such that
 the mid-P function returns midP_fnc(U0_bnd, ...) > alpha
}
\details{
This function is used in a random sampling scheme (i.e. with random alpha)
 to obtain a sample of U bounds at a particular timestep. The confidence intervals
 can then be approximated by taking percentiles of the sample.

 When this function is used in combination with a mid-P function, the random sampling
 scheme is equivalent to random sampling of fuzzy confidence bounds. Because the data
 is discrete, it can return a bound that is physically impossible i.e. U0_bnd < U1 + d0.
 This is necessary in order for the actual coverage to match the nominal.

 If the bound is impossible, this will be indicated with the impossibleFlag returned.
 If an impossible bound should not be sampled (e.g. because the U1 is already in the
 impossible region), then the impossible bound can be prevented by setting impossibleFlag = TRUE
 in the input.
}
\examples{
 S0 <- 100; S1 <- 96; d0 <- 1    # from the data
 U1 <- 200;                      # from an earlier timestep in the sampling algorithm
 alpha <- 0.5;                   # a randomly-sampled confidence level
 midP_fnc <- central_hyper_midP
 res <- find_U0_bnd(midP_fnc, alpha, S0, S1, U1, d0)
 U0_bnd <- res$U0_bnd            # the U bound at alpha=0.5

}
